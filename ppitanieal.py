import os
import random
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from supabase_client import save_weight, save_steps, save_food
from dotenv import load_dotenv
load_dotenv()


# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("TOKEN")
USER_ID_RAW = os.getenv("USER_ID")

print("TOKEN:", "OK" if TOKEN else "MISSING")
print("USER_ID:", USER_ID_RAW or "MISSING")

if not TOKEN or not USER_ID_RAW:
    raise ValueError("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TOKEN –∏ USER_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

USER_ID = int(USER_ID_RAW)

def is_active_hour():
    now = datetime.now(ZoneInfo("Europe/Vilnius"))
    return 8 <= now.hour < 21

support_messages = [
    "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!",
    "–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ!",
    "–í—ã–≥–ª—è–¥–∏—Ç –≤–∫—É—Å–Ω–æ! –ì–æ—Ä–¥ —Ç–æ–±–æ–π!",
    "–°–∏–ª–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "–ü–∏—Ç–∞–π—Å—è –∏ –ø–æ–±–µ–∂–¥–∞–π üí™"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_active_hour():
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –°–∫–∏–¥—ã–≤–∞–π —Ñ–æ—Ç–∫–∏ –µ–¥—ã, —è —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂—É üíö")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_active_hour():
        return
    reply = random.choice(support_messages)
    await update.message.reply_text(reply)

import re

async def handle_track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    print("DEBUG —Ç–µ–∫—Å—Ç:", repr(text))
    user_id = update.effective_user.id

    if "–≤–µ—Å" in text:
        match = re.search(r"–≤–µ—Å[^0-9\-]*([\d]+(?:[.,]\d+)?)", text)
        if match:
            try:
                weight = float(match.group(1).replace(",", "."))
                save_weight(user_id, weight)
                await update.message.reply_text(f"üìâ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞:", e)
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å.")

    elif "—à–∞–≥–∏" in text:
        match = re.search(r"—à–∞–≥–∏[^0-9\-]*([\d]+)", text)
        if match:
            try:
                steps = int(match.group(1))
                save_steps(user_id, steps)
                await update.message.reply_text(f"üö∂ {steps} —à–∞–≥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–≥–æ–≤:", e)
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–≥–∏.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤.")
    else:
        await update.message.reply_text("üìé –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /track –≤–µ—Å 88.4 –∏–ª–∏ /track —à–∞–≥–∏ 10000")


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^/track"), handle_track))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling-—Ä–µ–∂–∏–º–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
