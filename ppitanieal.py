import os
import random
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from supabase_client import save_weight, save_steps, save_food, get_steps_for_date, clean_duplicate_records
from dotenv import load_dotenv
load_dotenv()


# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("TOKEN")
USER_ID_RAW = os.getenv("USER_ID")

print("TOKEN:", "OK" if TOKEN else "MISSING")
print("USER_ID:", USER_ID_RAW or "MISSING")

if not TOKEN or not USER_ID_RAW:
    raise ValueError("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TOKEN –∏ USER_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

USER_ID = int(USER_ID_RAW)

# –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
clean_duplicate_records(USER_ID)

def is_active_hour():
    now = datetime.now(ZoneInfo("Europe/Vilnius"))
    return 8 <= now.hour < 21

support_messages = [
    "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!",
    "–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ!",
    "–í—ã–≥–ª—è–¥–∏—Ç –≤–∫—É—Å–Ω–æ! –ì–æ—Ä–¥ —Ç–æ–±–æ–π!",
    "–°–∏–ª–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "–ü–∏—Ç–∞–π—Å—è –∏ –ø–æ–±–µ–∂–¥–∞–π üí™"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_active_hour():
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º. –û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ:\n"
                                      "üìù /track –≤–µ—Å X - —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å\n"
                                      "üö∂ /track —à–∞–≥–∏ X - —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —à–∞–≥–∏\n"
                                      "üçΩ —Ñ–æ—Ç–æ –µ–¥—ã - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_active_hour():
        return
    reply = random.choice(support_messages)
    await update.message.reply_text(reply)

async def check_steps_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã —à–∞–≥–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å"""
    yesterday = datetime.now(ZoneInfo("Europe/Vilnius")) - timedelta(days=1)
    steps = get_steps_for_date(USER_ID, yesterday)
    
    if steps is None:
        await context.bot.send_message(
            chat_id=USER_ID,
            text=f"üìù –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')})!\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /track —à–∞–≥–∏ X –≤—á–µ—Ä–∞"
        )

async def daily_summary(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ø–æ–ª–Ω–æ—á—å"""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£ –∑–∞ –¥–µ–Ω—å
    await context.bot.send_message(
        chat_id=USER_ID,
        text="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è"
    )

import re

async def handle_track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    print("DEBUG —Ç–µ–∫—Å—Ç:", repr(text))
    user_id = update.effective_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞)
    date = datetime.now(ZoneInfo("Europe/Vilnius"))
    if "–≤—á–µ—Ä–∞" in text:
        date = date - timedelta(days=1)
        text = text.replace("–≤—á–µ—Ä–∞", "").strip()

    if "–≤–µ—Å" in text:
        match = re.search(r"–≤–µ—Å[^0-9\-]*([\d]+(?:[.,]\d+)?)", text)
        if match:
            try:
                weight = float(match.group(1).replace(",", "."))
                result = save_weight(user_id, weight, date)
                weight_change = result.get("weight_change")
                
                message = f"üìâ –í–µ—Å {weight} –∫–≥ "
                if "Updated existing weight record" in str(result.get("response")):
                    message += "–æ–±–Ω–æ–≤–ª—ë–Ω"
                else:
                    message += "—Å–æ—Ö—Ä–∞–Ω—ë–Ω"
                
                if date.date() != datetime.now(ZoneInfo("Europe/Vilnius")).date():
                    message += f" –∑–∞ {date.strftime('%d.%m.%Y')}"
                
                if weight_change is not None:
                    if weight_change > 0:
                        message += f"\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{weight_change:.1f} –∫–≥"
                    elif weight_change < 0:
                        message += f"\nüìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {weight_change:.1f} –∫–≥"
                    else:
                        message += "\n‚ûñ –í–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"
                message += "\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
                
                await update.message.reply_text(message)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞:", e)
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å.")

    elif "—à–∞–≥–∏" in text:
        match = re.search(r"—à–∞–≥–∏[^0-9\-]*([\d]+)", text)
        if match:
            try:
                steps = int(match.group(1))
                result = save_steps(user_id, steps, date)
                
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
                total_steps = result.get("total_steps", 0)
                print(f"DEBUG: Total steps after saving: {total_steps}")
                
                # –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                total_steps = int(total_steps)
                is_update = result.get("is_update", False)
                
                if is_update:
                    message = f"üö∂ +{steps} —à–∞–≥–æ–≤ (–≤—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_steps})"
                else:
                    message = f"üö∂ {steps} —à–∞–≥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ"
                
                if date.date() != datetime.now(ZoneInfo("Europe/Vilnius")).date():
                    message += f" –∑–∞ {date.strftime('%d.%m.%Y')}"
                
                # –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏
                remaining = max(0, 10000 - total_steps)
                
                if total_steps >= 10000:
                    message += f"\nüéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –¥–æ—Å—Ç–∏–≥ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –≤ 10,000 —à–∞–≥–æ–≤!"
                    if total_steps > 10000:
                        message += f" –¢—ã –ø—Ä–æ—à–µ–ª –Ω–∞ {total_steps - 10000} —à–∞–≥–æ–≤ –±–æ–ª—å—à–µ!"
                else:
                    message += f"\nüí™ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –µ—â—ë {remaining} —à–∞–≥–æ–≤ –¥–æ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!"
                
                await update.message.reply_text(message)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–≥–æ–≤:", e)
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–≥–∏.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤.")
    else:
        await update.message.reply_text("üìé –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n"
                                      "/track –≤–µ—Å 88.4 - –∑–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å\n"
                                      "/track —à–∞–≥–∏ 10000 - –∑–∞–ø–∏—Å–∞—Ç—å —à–∞–≥–∏\n"
                                      "–î–æ–±–∞–≤—å '–≤—á–µ—Ä–∞' –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å")


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^/track"), handle_track))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    job_queue = app.job_queue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–≥–æ–≤ –≤ 9:00
    job_queue.run_daily(
        check_steps_reminder,
        time=datetime.strptime("09:00", "%H:%M").time(),
        days=(0, 1, 2, 3, 4, 5, 6)
    )
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 00:00
    job_queue.run_daily(
        daily_summary,
        time=datetime.strptime("00:00", "%H:%M").time(),
        days=(0, 1, 2, 3, 4, 5, 6)
    )
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling-—Ä–µ–∂–∏–º–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
