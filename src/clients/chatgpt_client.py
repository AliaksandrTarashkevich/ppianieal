import os
import re
import json
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def reconcile_total(data: dict) -> dict:
    """
    –ï—Å–ª–∏ —Å—É–º–º–∞ –≤ breakdown –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±–ª–æ–∫–∞ 'total' –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 5 %,
    –∑–∞–º–µ–Ω—è–µ–º total –Ω–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤—ã—à–∞—Ç—å / –Ω–µ –∑–∞–Ω–∏–∂–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –∏—Ç–æ–≥.
    """
    calc = {"calories": 0, "protein": 0.0, "fat": 0.0, "carbs": 0.0}
    for row in data["breakdown"]:
        calc["calories"] += row["calories"]
        calc["protein"]  += row["protein"]
        calc["fat"]      += row["fat"]
        calc["carbs"]    += row["carbs"]

    # –µ—Å–ª–∏ GPT-total ¬´–ø–ª–∞–≤–∞–µ—Ç¬ª > 5 %
    if abs(calc["calories"] - data["total"]["calories"]) > calc["calories"] * 0.05:
        data["total"] = calc               # –ø–æ–¥–º–µ–Ω—è–µ–º –∫—Ä–∏–≤–æ–π total
    return data

def analyze_food(description: str) -> dict:
    prompt = f"""
–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π:
- –ö–∞–ª–æ—Ä–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–∫–∞–ª)
- –ë–µ–ª–∫–∏ (–≤ –≥—Ä–∞–º–º–∞—Ö, 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
- –ñ–∏—Ä—ã (–≤ –≥—Ä–∞–º–º–∞—Ö, 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
- –£–≥–ª–µ–≤–æ–¥—ã (–≤ –≥—Ä–∞–º–º–∞—Ö, 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)

–¢–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤—å —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É —Å —Ä–∞—Å—á—ë—Ç–æ–º:
- –ù–∞–∑–≤–∞–Ω–∏–µ
- –ö–∞–ª–æ—Ä–∏–∏
- –ë–µ–ª–∫–∏
- –ñ–∏—Ä—ã
- –£–≥–ª–µ–≤–æ–¥—ã

–û–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã:
{description}

–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "total": {{
    "calories": 1234,
    "protein": 120.5,
    "fat": 60.2,
    "carbs": 150.1
  }},
  "breakdown": [
    {{
      "item": "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å 200–≥",
      "calories": 170,
      "protein": 4.0,
      "fat": 0.4,
      "carbs": 40.0
    }},
    ...
  ]
}}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        )

        raw = response.choices[0].message.content.strip()
        print("üßæ GPT raw response:\n", raw)

        # –ï—Å–ª–∏ markdown-–±–ª–æ–∫ ‚Äî —á–∏—Å—Ç–∏–º
        if raw.startswith("```"):
            raw = re.sub(r"^```[a-zA-Z]*\n?", "", raw)
            raw = re.sub(r"\n?```$", "", raw).strip()

        # –ù–∞—Ö–æ–¥–∏–º JSON –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
        start = raw.find("{")
        end = raw.rfind("}") + 1
        json_str = raw[start:end]

        print("üì¶ Extracted JSON:\n", json_str)

        data = json.loads(json_str)
        data = reconcile_total(data)     # ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
        return data


    except Exception as e:
        print("‚ùå GPT parsing error:", e)
        return {}

